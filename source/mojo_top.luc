module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_seg[8],
    output io_sel[4]
    
  ) {
  
  sig rst;                  // reset signal
  
  alu alu;  // import alu as alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    fsm state = {IDLE, INPUTA, INPUTB, CALCULATE, AUTO, // Manual testing
              TESTADDER1, TESTADDER2, TESTADDER3, TESTADDER4, TESTADDER5, TESTADDER6, TESTADDER7, TESTADDER8, TESTADDER9, // Adder test cases
              TESTBOOL1, TESTBOOL2, TESTBOOL3, TESTBOOL4, TESTBOOL5, TESTBOOL6, TESTBOOL7, TESTBOOL8, TESTBOOL9,   // Boolean test cases
              TESTSHIFT1, TESTSHIFT2, TESTSHIFT3, TESTSHIFT4, TESTSHIFT5, TESTSHIFT6, TESTSHIFT7, TESTSHIFT8, TESTSHIFT9,  // Shifter test cases
              TESTCMP1, TESTCMP2, TESTCMP3, TESTCMP4, TESTCMP5, TESTCMP6, TESTCMP7, TESTCMP8, TESTCMP9,   // Comparator test cases
              PASS, FAIL};  // Other test cases
    dff inp_a[16];  // to store input of a
    dff inp_b[16];  // to store input of b
    
    .rst(rst){
      
      counter ctr (#SIZE(3), #DIV(24));
      multi_seven_seg seg;
    }
    dff counter[27];
  }

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;    
    
    io_led[2][5:0] = io_dip[2][5:0];  // visual representation ALUFN
    io_led[2][7] = io_dip[2][7];     // Test scrambler indicator
    alu.a = 0;                        
    alu.b = 0;
    alu.alufn = 0;
    seg.values = {8h0,8h0,8h0,8h0};   // random value assignment for a, b, alufn, and seven segment display
    
    case(state.q){      
    // Manual Testing
      state.IDLE:
        seg.values = {8h8,8h4,8h9,8h5};  // IDLE
        if (io_button[0] == 1) {
          state.d = state.INPUTA;        // when UP button is pressed, state will change to INPUTA
        } 
        
      state.INPUTA:
        seg.values = {8h8,8hA,8hC,8h1};  // INPA
        io_led[1][7:0] = io_dip[1];      // Visual representation of the input
        io_led[0][7:0] = io_dip[0];
        inp_a.d = c{io_dip[1][7:0], io_dip[0][7:0]};  // Concatenate the value from the dips as the data input of a
        
        if (io_button[2] == 1) {         // when DOWN button is pressed, state will change to INPUTB
          state.d = state.INPUTB;
        } else if (io_button[3] == 1) {  // LEFT button became the reset button
          state.d = state.IDLE;
        }
        
      state.INPUTB:
        seg.values = {8h8,8hA,8hC,8h2};  // INPB
        io_led[1][7:0] = io_dip[1];      // Visual representation of the input
        io_led[0][7:0] = io_dip[0];
        inp_b.d = c{io_dip[1][7:0], io_dip[0][7:0]};  // Concatenate the value from the dips as the data input of b
        
        if (io_button[1] == 1) {
          state.d = state.CALCULATE;     // when CENTER button is pressed, calculation based on the ALUFN setup will be performed
        } else if (io_button[3] == 1) {
          state.d = state.IDLE;
        }
        
      state.CALCULATE:
        seg.values = {8h3,8h1,8h9,8h3};  // CALC
        alu.a = inp_a.q;                 // taking the stored value of A as the input A in alu source file
        alu.b = inp_b.q;
        
        alu.alufn = io_dip[2][5:0];      // taking the dip value as ALUFN value
        
        io_led[1] = alu.out[15:8];       // visual representation of the output
        io_led[0] = alu.out[7:0];
        
        if (io_button[3] == 1) {
          state.d = state.IDLE;
          }
        
              
      // Automatic states          
      state.AUTO:
        seg.values = {8h1, 8hF, 8hE, 8h10};  // AUTO

      // Adder test
      state.TESTADDER1:
        seg.values = {8h1,8h4,8h4,8h11}; // ADD1
        alu.a = 16b0001010101010101;
        alu.b = 16b0010101010101011;
        alu.alufn = 6b0;       
        if (io_dip[2][7] == 1){          // Scrambler, when the dip is switched on, it will trigger wrong value for input a and b resulting in failing the test cases
          alu.a = 16b0;
          alu.b = 16b0;          
        }
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];  
        
      state.TESTADDER2:
        seg.values = {8h1,8h4,8h4,8h12}; // ADD2
        alu.a = 16b1001010101000101;
        alu.b = 16b0001111010101111;
        alu.alufn = 6b0;     
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER3:
        seg.values = {8h1,8h4,8h4,8h13}; // ADD3
        alu.a = 16b0111000011100000;
        alu.b = 16b0000111100100000;
        alu.alufn = 6b0;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }    
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER4:
        seg.values = {8h15,8hF,8h2,8h11}; // SUB1
        alu.a = 16b1111000011100000;
        alu.b = 16b0000000000100000;
        alu.alufn = 6b1;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }      
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER5:
        seg.values = {8h15,8hF,8h2,8h12}; // SUB2
        alu.a = 16b0001111001111111;
        alu.b = 16b0000010101010101;
        alu.alufn = 6b1;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }     
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER6:
        seg.values = {8h15,8hF,8h2,8h13}; // SUB3
        alu.a = 16b1000000000000000;
        alu.b = 16b0000000000000001;
        alu.alufn = 6b1;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER7:
        seg.values = {8hA,8hF,8h9,8h11}; // MUL1
        alu.a = 16b0;
        alu.b = 16b0000000000000001;
        alu.alufn = 6b10;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;   
          io_led[0] = 8x{0};       
        }       
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER8:
        seg.values = {8hA,8hF,8h9,8h12}; // MUL2
        alu.a = 16b1000000000000000;
        alu.b = 16b0000000000001001;
        alu.alufn = 6b10;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTADDER9:
        seg.values = {8hA,8hF,8h9,8h13}; // MUL3
        alu.a = 16b111000000;
        alu.b = 16b000000111;
        alu.alufn = 6b10;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }        
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];                 
          
        
      // Boolean test          
      state.TESTBOOL1: // depending on the operator, boolean test will lit the LED when the condition is fulfilled
        seg.values = {8h1,8hA,8h4,8h11}; // AND1
        alu.a = 16b0001010101010101;
        alu.b = 16b0010101010101011;
        alu.alufn = 6b11000;  
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }        
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];
                
      state.TESTBOOL2:
        seg.values = {8h1,8hA,8h4,8h12}; // AND2
        alu.a = 16b1001010101000101;
        alu.b = 16b1010010101010111;
        alu.alufn = 6b11000;
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }        
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];
                       
      state.TESTBOOL3:
        seg.values = {8h1,8hA,8h4,8h13}; // AND3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111111100101;
        alu.alufn = 6b11000; 
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }        
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];
        
      state.TESTBOOL4:
        seg.values = {8h0,8h10,8hD,8h11}; // OR1
        alu.a = 16b0001010101010101;
        alu.b = 16b0010101010101011; 
        alu.alufn = 6b11110;     
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }     
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];
        
      state.TESTBOOL5:
        seg.values = {8h0,8h10,8hD,8h12}; // OR2
        alu.a = 16b1001010101000101;
        alu.b = 16b1010010101010111;
        alu.alufn = 6b11110;   
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }      
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];
        
      state.TESTBOOL6:
        seg.values = {8h0,8h10,8hD,8h13}; // OR3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111111100101;
        alu.alufn = 6b11110;      
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }   
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];  
        
      state.TESTBOOL7:
        seg.values = {8h7,8h10,8hD,8h11}; // XOR1
        alu.a = 16b0001010101010101;
        alu.b = 16b0010101010101011;
        alu.alufn = 6b10110; 
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }         
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTBOOL8:
        seg.values = {8h7,8h10,8hD,8h12}; // XOR2
        alu.a = 16b1001010101000101;
        alu.b = 16b1010010101010111;
        alu.alufn = 6b10110;      
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }   
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0]; 
        
      state.TESTBOOL9:
        seg.values = {8h7,8h10,8hD,8h13}; // XOR3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111111100101;
        alu.alufn = 6b10110;    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }     
        io_led[1] = alu.out[15:8];        
        io_led[0] = alu.out[7:0];       
        
      
      //Shifter Test
      state.TESTSHIFT1:  
        seg.values = {8h15,8h7,8h9,8h11}; // SHL1
        alu.a = 16b01010101010101;
        alu.b = 16b0;
        alu.alufn = 6b100000; // SHL  
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT2:  
        seg.values = {8h15,8h7,8h9,8h12}; // SHL2
        alu.a = 16b1001010101000101;
        alu.b = 16b1111;
        alu.alufn = 6b100000; // SHL   
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }      
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT3:  
        seg.values = {8h15,8h7,8h9,8h13}; // SHL3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111100100101;
        alu.alufn = 6b100000; // SHL  
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT4:  
        seg.values = {8h15,8h7,8hD,8h11}; // SHR1
        alu.a = 16b01010101010101;
        alu.b = 16b0;
        alu.alufn = 6b100001; // SHL   
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }      
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT5:  
        seg.values = {8h15,8h7,8hD,8h12}; // SHR2
        alu.a = 16b1001010101000101;
        alu.b = 16b1111;
        alu.alufn = 6b100001; // SHL    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }     
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT6:  
        seg.values = {8h15,8h7,8hD,8h13}; // SHR3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111100100101;
        alu.alufn = 6b100001;// SHL     
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }    
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT7:  
        seg.values = {8h15,8hD,8h1,8h11}; // SRA1
        alu.a = 16b0001010101010101;
        alu.b = 16b0;
        alu.alufn = 6b100011;// SHL    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }     
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT8:  
        seg.values = {8h15,8hD,8h1,8h12}; // SRA2
        alu.a = 16b1001010101000101;
        alu.b = 16b1111;
        alu.alufn = 6b100011; // SHL  
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        
      state.TESTSHIFT9:  
        seg.values = {8h15,8hD,8h1,8h13}; // SRA3
        alu.a = 16b1111000011100000;
        alu.b = 16b0000111100100101;
        alu.alufn = 6b100011; // SHL
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }         
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];    
        
        
      //Comparator test          
      state.TESTCMP1:  
        seg.values = {8h3,8h5,8hB,8h11};  //CEQ1
        alu.a = 16b0001010101010101;
        alu.b = 16b0010101010101011;
        alu.alufn = 6b110011;       
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        } 
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];       
        
      state.TESTCMP2:  
        seg.values = {8h3,8h5,8hB,8h12};  //CEQ2
        alu.a = 16b1001010101000101;
        alu.b = 16b0001111010101111;
        alu.alufn = 6b110011;  
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }       
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP3:  
        seg.values = {8h3,8h5,8hB,8h13};  //CEQ3
        alu.a = 16b1111000011100000;
        alu.b = 16b1111000011100000;
        alu.alufn = 6b110011;   
        if (io_dip[2][7] == 1){
          alu.a = 16b1;
          alu.b = 16b0;
          io_led[0] = 8x{0};          
        }   
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP4:  
        seg.values = {8h3,8h9,8hE,8h11};  //CLT1
        alu.a = 16b0010101010101011;
        alu.b = 16b0001010101010101;
        alu.alufn = 6b110101;    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b1;  
          io_led[0] = 8x{0};         
        }     
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP5:  
        seg.values = {8h3,8h9,8hE,8h12};  //CLT2
        alu.a = 16b1001010101000101;
        alu.b = 16b0001111010101111;
        alu.alufn = 6b110101;    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b0;          
        }  
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP6:  
        seg.values = {8h3,8h9,8hE,8h13};  //CLT3
        alu.a = 16b1111000011100000;
        alu.b = 16b1111000011100000;
        alu.alufn = 6b110101;   
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b1;   
          io_led[0] = 8x{0};        
        }   
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP7:  
        seg.values = {8h3,8h9,8h5,8h11};  //CLE1
        alu.a = 16b0010101010101011;
        alu.b = 16b0001010101010101;
        alu.alufn = 6b110111;    
        if (io_dip[2][7] == 1){
          alu.a = 16b0;
          alu.b = 16b1;    
          io_led[0] = 8x{0};       
        }   
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP8:  
        seg.values = {8h3,8h9,8h5,8h12};  //CLE2
        alu.a = 16b1001010101000101;
        alu.b = 16b0001111010101111;
        alu.alufn = 6b110111;   
        if (io_dip[2][7] == 1){
          alu.a = 16b1;
          alu.b = 16b0; 
          io_led[0] = 8x{0};          
        }    
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0]; 
        
      state.TESTCMP9:  
        seg.values = {8h3,8h9,8h5,8h13};  //CLE3
        alu.a = 16b1111000011100000;
        alu.b = 16b1111000011100000;
        alu.alufn = 6b110111;    
        if (io_dip[2][7] == 1){
          alu.a = 16b1;
          alu.b = 16b0;    
          io_led[0] = 8x{0};       
        }     
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
               
        
      //Other states
      state.PASS:
        seg.values = {8hC, 8h1, 8h15, 8h15}; //PASS 
        
      state.FAIL:
        seg.values = {8h6, 8h1, 8h8, 8h9};   //FAIL
      } 
 
    // Automated testing
    if (counter.q[26:0] == 0) {
      case(state.q) {
      
        state.IDLE:
          if(io_button[4] == 1) {
            state.d = state.AUTO;
            }
          
        state.AUTO:
          state.d = state.TESTADDER1;
          
        // Adder cases  
        state.TESTADDER1:  
          if (alu.out == 16b0100000000000000) { 
            state.d = state.TESTADDER2;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER2:  
          if (alu.out == 16b01011001111110100) { 
            state.d = state.TESTADDER3;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER3:  
          if (alu.out == 16b1000000000000000) {
            state.d = state.TESTADDER4;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER4:  
          if (alu.out == 16b1111000011000000) { 
            state.d = state.TESTADDER5;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER5:  
          if (alu.out == 16b01100100101010) { 
            state.d = state.TESTADDER6;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER6:  
          if (alu.out == 16b0111111111111111) { 
            state.d = state.TESTADDER7;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER7:  
          if (alu.out == 16b0 ) { 
            state.d = state.TESTADDER8;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER8:  
          if (alu.out == 16b1000000000000000) { 
            state.d = state.TESTADDER9;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTADDER9:  
          if (alu.out == 16b0110001000000) {
            state.d = state.TESTBOOL1;
            } else {
            state.d = state.FAIL;
            }                  
          
          
        // Bool cases
        state.TESTBOOL1:  
          if (alu.out == 16b0000000000000001) { 
            state.d = state.TESTBOOL2;
            } else {
            state.d = state.FAIL;
            }
          
        state.TESTBOOL2:
          if (alu.out == 16b1000010101000101) { 
            state.d = state.TESTBOOL3;
            } else {
            state.d = state.FAIL;
            }
          
        state.TESTBOOL3:   
          if (alu.out == 16b0000000011100000) { 
            state.d = state.TESTBOOL4;
            } else {
            state.d = state.FAIL;
            }
          
        state.TESTBOOL4:    
          if (alu.out == 16b0011111111111111) { 
            state.d = state.TESTBOOL5;
            } else {
            state.d = state.FAIL;
            }
          
        state.TESTBOOL5:
          if (alu.out == 16b1011010101010111) { 
            state.d = state.TESTBOOL6;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTBOOL6:
          if (alu.out == 16b1111111111100101) { 
            state.d = state.TESTBOOL7;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTBOOL7:
          if (alu.out == 16b0011111111111110) { 
            state.d = state.TESTBOOL8;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTBOOL8:
          if (alu.out == 16b0011000000010010) { 
            state.d = state.TESTBOOL9;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTBOOL9:
          if (alu.out == 16b1111111100000101) { 
            state.d = state.TESTSHIFT1;
            } else {
            state.d = state.FAIL;
            }        
           
          
        // Shifter cases
        state.TESTSHIFT1:
          if (alu.out == 16b01010101010101) { 
            state.d = state.TESTSHIFT2;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT2:
          if (alu.out == 16b1000000000000000) { 
            state.d = state.TESTSHIFT3;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT3:
          if (alu.out == 16b0001110000000000) { 
            state.d = state.TESTSHIFT4;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT4:
          if (alu.out == 16b01010101010101) { 
            state.d = state.TESTSHIFT5;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT5:
          if (alu.out == 16b0000000000000001) { 
            state.d = state.TESTSHIFT6;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT6:
          if (alu.out == 16b0000011110000111) { 
            state.d = state.TESTSHIFT7;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT7:
          if (alu.out == 16b0001010101010101) { 
            state.d = state.TESTSHIFT8;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT8:
          if (alu.out == 16b1111111111111111) { 
            state.d = state.TESTSHIFT9;
            } else {
            state.d = state.FAIL;
            } 
          
        state.TESTSHIFT9:
          if (alu.out == 16b1111111110000111) { 
            state.d = state.TESTCMP1;
            } else {
            state.d = state.FAIL;
            }                 
        
          
        //Comparator cases
        state.TESTCMP1:
          if (alu.out == 16b0) { 
            state.d = state.TESTCMP2;
            } else {
            state.d = state.FAIL;
            }   
          
        state.TESTCMP2:
          if (alu.out == 16b0) { 
            state.d = state.TESTCMP3;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP3:
          if (alu.out == 16b1) { 
            state.d = state.TESTCMP4;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP4:
          if (alu.out == 16b0) { 
            state.d = state.TESTCMP5;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP5:
          if (alu.out == 16b1) { 
            state.d = state.TESTCMP6;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP6:
          if (alu.out == 16b0) { 
            state.d = state.TESTCMP7;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP7:
          if (alu.out == 16b0) { 
            state.d = state.TESTCMP8;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP8:
          if (alu.out == 16b1) { 
            state.d = state.TESTCMP9;
            } else {
            state.d = state.FAIL;
            }  
          
        state.TESTCMP9:
          if (alu.out == 16b1) { 
            state.d = state.PASS;
            } else {
            state.d = state.FAIL;
            }                  
                
        state.PASS:
          if (counter.q == 0) {
            state.d = state.IDLE;
            }
                         
        state.FAIL:
          if (counter.q == 0) {
            state.d = state.IDLE;
            }
      }  
    }
    counter.d = counter.q + 1;
    
  }
}